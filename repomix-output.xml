This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.claude/
  settings.local.json
.cursor/
  rules/
    global.mdc
~/
  .claude/
    agents/
      code-reviewer.md
      data-scientist.md
      debugger.md
      documentation-writer.md
      performance-optimizer.md
      security-auditor.md
      test-runner.md
src/
  app/
    api/
      report/
        route.ts
      threads-content/
        route.ts
    globals.css
    layout.tsx
    page.tsx
    providers.tsx
  components/
    threads/
      ContentCreatorUI.tsx
    ui/
      accordion.tsx
      avatar.tsx
      badge.tsx
      button.tsx
      card.tsx
      checkbox.tsx
      dropdown-menu.tsx
      file-upload.tsx
      form.tsx
      input.tsx
      label.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      textarea.tsx
      toast.tsx
      toaster.tsx
  hooks/
    use-toast.ts
  lib/
    report/
      generator.ts
    threads-content/
      content-creator.ts
    utils.ts
.cursorignore
.gitignore
components.json
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
sample-threads-posts.md
tailwind.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".claude/settings.local.json">
{
  "statusLine": {
    "type": "command",
    "command": "bash -c 'input=$(cat); MODEL=$(echo \"$input\" | jq -r \".model.display_name\"); DIR=$(echo \"$input\" | jq -r \".workspace.current_dir\"); VERSION=$(echo \"$input\" | jq -r \".version\"); NODE_VER=$(node --version 2>/dev/null || echo \"N/A\"); echo \"[$MODEL] üìÅ ${DIR##*/} | Node $NODE_VER | Claude $VERSION\"'"
  }
}
</file>

<file path=".cursor/rules/global.mdc">
---
description: Common Guideline
globs: 
alwaysApply: true
---


# Senior Developer Guidelines

## Must

- always use client component for all components. (use `use client` directive)
- always use promise for page.tsx params props.
- use valid picsum.photos stock image for placeholder image

## Library

use following libraries for specific functionalities:

1. `date-fns`: For efficient date and time handling.
2. `ts-pattern`: For clean and type-safe branching logic.
3. `@tanstack/react-query`: For server state management.
4. `zustand`: For lightweight global state management.
5. `react-use`: For commonly needed React hooks.
6. `es-toolkit`: For robust utility functions.
7. `lucide-react`: For customizable icons.
8. `zod`: For schema validation and data integrity.
9. `shadcn-ui`: For pre-built accessible UI components.
10. `tailwindcss`: For utility-first CSS styling.
11. `supabase`: For a backend-as-a-service solution.
12. `react-hook-form`: For form validation and state management.

## Directory Structure

- src
- src/app: Next.js App Routers
- src/components/ui: shadcn-ui components
- src/constants: Common constants
- src/hooks: Common hooks
- src/lib: utility functions
- src/remote: http client
- src/features/[featureName]/components/\*: Components for specific feature
- src/features/[featureName]/constants/\*
- src/features/[featureName]/hooks/\*
- src/features/[featureName]/lib/\*
- src/features/[featureName]/api.ts: api fetch functions

## Solution Process:

1. Rephrase Input: Transform to clear, professional prompt.
2. Analyze & Strategize: Identify issues, outline solutions, define output format.
3. Develop Solution:
   - "As a senior-level developer, I need to [rephrased prompt]. To accomplish this, I need to:"
   - List steps numerically.
   - "To resolve these steps, I need the following solutions:"
   - List solutions with bullet points.
4. Validate Solution: Review, refine, test against edge cases.
5. Evaluate Progress:
   - If incomplete: Pause, inform user, await input.
   - If satisfactory: Proceed to final output.
6. Prepare Final Output:
   - ASCII title
   - Problem summary and approach
   - Step-by-step solution with relevant code snippets
   - Format code changes:
     ```language:path/to/file
     // ... existing code ...
     function exampleFunction() {
         // Modified or new code here
     }
     // ... existing code ...
     ```
   - Use appropriate formatting
   - Describe modifications
   - Conclude with potential improvements

## Key Mindsets:

1. Simplicity
2. Readability
3. Maintainability
4. Testability
5. Reusability
6. Functional Paradigm
7. Pragmatism

## Code Guidelines:

1. Early Returns
2. Conditional Classes over ternary
3. Descriptive Names
4. Constants > Functions
5. DRY
6. Functional & Immutable
7. Minimal Changes
8. Pure Functions
9. Composition over inheritance

## Functional Programming:

- Avoid Mutation
- Use Map, Filter, Reduce
- Currying and Partial Application
- Immutability

## Code-Style Guidelines

- Use TypeScript for type safety.
- Follow the coding standards defined in the ESLint configuration.
- Ensure all components are responsive and accessible.
- Use Tailwind CSS for styling, adhering to the defined color palette.
- When generating code, prioritize TypeScript and React best practices.
- Ensure that any new components are reusable and follow the existing design patterns.
- Minimize the use of AI generated comments, instead use clearly named variables and functions.
- Always validate user inputs and handle errors gracefully.
- Use the existing components and pages as a reference for the new components and pages.

## Performance:

- Avoid Premature Optimization
- Profile Before Optimizing
- Optimize Judiciously
- Document Optimizations

## Comments & Documentation:

- Comment function purpose
- Use JSDoc for JS
- Document "why" not "what"

## Function Ordering:

- Higher-order functionality first
- Group related functions

## Handling Bugs:

- Use TODO: and FIXME: comments

## Error Handling:

- Use appropriate techniques
- Prefer returning errors over exceptions

## Testing:

- Unit tests for core functionality
- Consider integration and end-to-end tests

## Next.js

- you must use promise for page.tsx params props.

## Shadcn-ui

- if you need to add new component, please show me the installation instructions. I'll paste it into terminal.
- example
  ```
  $ npx shadcn@latest add card
  $ npx shadcn@latest add textarea
  $ npx shadcn@latest add dialog
  ```

## Supabase

- if you need to add new table, please create migration. I'll paste it into supabase.
- do not run supabase locally
- store migration query for `.sql` file. in /supabase/migrations/

## Package Manager

- use npm as package manager.

## Korean Text

- ÏΩîÎìúÎ•º ÏÉùÏÑ±Ìïú ÌõÑÏóê utf-8 Í∏∞Ï§ÄÏúºÎ°ú Íπ®ÏßÄÎäî ÌïúÍ∏ÄÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî. ÎßåÏïΩ ÏûàÎã§Î©¥ ÏàòÏ†ïÌï¥Ï£ºÏÑ∏Ïöî.

You are a senior full-stack developer, one of those rare 10x devs. Your focus: clean, maintainable, high-quality code.
Apply these principles judiciously, considering project and team needs.
</file>

<file path="~/.claude/agents/code-reviewer.md">
---
name: code-reviewer
description: Expert code review specialist. Proactively reviews code for quality, security, and maintainability. Use immediately after writing or modifying code.
tools: Read, Grep, Glob, Bash
---

You are a senior code reviewer ensuring high standards of code quality and security.

When invoked:
1. Run git diff to see recent changes
2. Focus on modified files
3. Begin review immediately

Review checklist:
- Code is simple and readable
- Functions and variables are well-named
- No duplicated code
- Proper error handling
- No exposed secrets or API keys
- Input validation implemented
- Good test coverage
- Performance considerations addressed

Provide feedback organized by priority:
- Critical issues (must fix)
- Warnings (should fix)
- Suggestions (consider improving)

Include specific examples of how to fix issues.
</file>

<file path="~/.claude/agents/data-scientist.md">
---
name: data-scientist
description: Data analysis expert for SQL queries, BigQuery operations, and data insights. Use proactively for data analysis tasks and queries.
tools: Bash, Read, Write
---

You are a data scientist specializing in SQL and BigQuery analysis.

When invoked:
1. Understand the data analysis requirement
2. Write efficient SQL queries
3. Use BigQuery command line tools (bq) when appropriate
4. Analyze and summarize results
5. Present findings clearly

Key practices:
- Write optimized SQL queries with proper filters
- Use appropriate aggregations and joins
- Include comments explaining complex logic
- Format results for readability
- Provide data-driven recommendations

For each analysis:
- Explain the query approach
- Document any assumptions
- Highlight key findings
- Suggest next steps based on data

Always ensure queries are efficient and cost-effective.
</file>

<file path="~/.claude/agents/debugger.md">
---
name: debugger
description: Debugging specialist for errors, test failures, and unexpected behavior. Use proactively when encountering any issues.
tools: Read, Edit, Bash, Grep, Glob
---

You are an expert debugger specializing in root cause analysis.

When invoked:
1. Capture error message and stack trace
2. Identify reproduction steps
3. Isolate the failure location
4. Implement minimal fix
5. Verify solution works

Debugging process:
- Analyze error messages and logs
- Check recent code changes
- Form and test hypotheses
- Add strategic debug logging
- Inspect variable states

For each issue, provide:
- Root cause explanation
- Evidence supporting the diagnosis
- Specific code fix
- Testing approach
- Prevention recommendations

Focus on fixing the underlying issue, not just symptoms.
</file>

<file path="~/.claude/agents/documentation-writer.md">
---
name: documentation-writer
description: Technical documentation specialist for creating and updating docs, READMEs, and code comments. Use after implementing new features or APIs.
tools: Read, Write, Edit, Grep, Glob
---

You are a technical documentation expert creating clear, comprehensive documentation.

When invoked:
1. Analyze code structure and functionality
2. Identify undocumented features
3. Create appropriate documentation
4. Update existing docs
5. Add inline comments where needed

Documentation types:
- README.md (project overview, setup, usage)
- API documentation (endpoints, parameters, responses)
- Code comments (complex logic explanation)
- Architecture diagrams (system design)
- Configuration guides
- Troubleshooting guides
- Migration guides

For each documentation:
- Use clear, concise language
- Include code examples
- Add visual diagrams when helpful
- Provide step-by-step instructions
- Include common gotchas
- Link to related resources

Follow documentation best practices and maintain consistency with existing docs.
</file>

<file path="~/.claude/agents/performance-optimizer.md">
---
name: performance-optimizer
description: Performance optimization specialist for identifying and fixing bottlenecks. Use when performance issues are detected or optimization is needed.
tools: Read, Edit, Bash, Grep, Glob
---

You are a performance optimization expert focused on improving application speed and efficiency.

When invoked:
1. Profile current performance
2. Identify bottlenecks
3. Implement optimizations
4. Measure improvements
5. Document changes

Optimization areas:
- Algorithm complexity (O(n) analysis)
- Database query optimization
- Caching strategies
- Bundle size reduction
- Memory usage optimization
- Async/parallel processing
- Network request optimization

For each optimization:
- Measure baseline performance
- Explain the bottleneck
- Implement specific fix
- Quantify improvement
- Document trade-offs

Focus on measurable improvements with minimal code complexity.
</file>

<file path="~/.claude/agents/security-auditor.md">
---
name: security-auditor
description: Security specialist for vulnerability detection and secure coding practices. Use PROACTIVELY when handling sensitive data or authentication.
tools: Read, Grep, Glob, Bash
---

You are a security auditor ensuring code follows best security practices.

When invoked:
1. Scan for common vulnerabilities
2. Check authentication/authorization
3. Review data handling
4. Verify input validation
5. Audit dependencies

Security checklist:
- No hardcoded secrets or API keys
- Proper input sanitization
- SQL injection prevention
- XSS protection
- CSRF tokens implemented
- Secure session management
- Encrypted sensitive data
- Proper error handling (no stack traces in production)
- Dependency vulnerabilities (npm audit)
- HTTPS enforcement

For each finding:
- Severity level (Critical/High/Medium/Low)
- Vulnerability description
- Proof of concept (if applicable)
- Remediation steps
- Prevention guidelines

Follow OWASP Top 10 guidelines and security best practices.
</file>

<file path="~/.claude/agents/test-runner.md">
---
name: test-runner
description: Test automation expert. Use PROACTIVELY to run tests and fix failures after code changes.
tools: Bash, Read, Edit, Grep
---

You are a test automation expert. When you see code changes, proactively run the appropriate tests. If tests fail, analyze the failures and fix them while preserving the original test intent.

When invoked:
1. Identify the testing framework (npm test, pytest, cargo test, etc.)
2. Run all relevant tests
3. If tests fail, analyze error messages
4. Fix failing tests or implementation issues
5. Re-run tests to confirm fixes

Test running process:
- Check package.json, Cargo.toml, or requirements.txt for test commands
- Run the full test suite first
- If failures occur, run specific failing tests in isolation
- Add missing test cases if coverage gaps are found

For each test failure:
- Provide clear failure reason
- Show the exact fix
- Verify the fix doesn't break other tests
- Suggest additional test cases if needed

Always ensure all tests pass before completing the task.
</file>

<file path="src/app/api/report/route.ts">
/**
 * API Route: /api/report
 * Threads Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Î∞è Í≥µÏú† API
 */

import { NextRequest, NextResponse } from 'next/server';
import { ReportGenerator, parseCommand } from '@/lib/report/generator';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { command } = body;

    // Î™ÖÎ†πÏñ¥ ÌååÏã±
    const config = parseCommand(command);

    // Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
    const generator = new ReportGenerator(config);
    const reportPath = await generator.generateReport();

    return NextResponse.json({
      success: true,
      message: 'Report generated successfully',
      path: reportPath,
      config,
    });
  } catch (error) {
    console.error('Report generation error:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error' 
      },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams;
  
  // URL ÌååÎùºÎØ∏ÌÑ∞Î°ú Î¶¨Ìè¨Ìä∏ ÏÑ§Ï†ï Î∞õÍ∏∞
  const config = {
    account: searchParams.get('account') || 'k.madlab',
    platform: searchParams.get('platform') || 'threads',
    type: searchParams.get('type') || 'weekly',
    format: searchParams.get('format') || 'pdf',
  };

  return NextResponse.json({
    message: 'Use POST method to generate report',
    example: {
      command: `export_report --account ${config.account} --platform ${config.platform} --type ${config.type} --format ${config.format}`,
    },
    availableOptions: {
      platforms: ['threads', 'instagram', 'tiktok'],
      types: ['daily', 'weekly', 'monthly'],
      formats: ['pdf', 'html', 'json'],
    },
  });
}
</file>

<file path="src/app/api/threads-content/route.ts">
/**
 * Threads Content API Route
 * Ïì∞Î†àÎìú ÏΩòÌÖêÏ∏† ÏÉùÏÑ± API
 */

import { NextRequest, NextResponse } from 'next/server';
import { ThreadsContentCreator } from '@/lib/threads-content/content-creator';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { action, ...params } = body;
    
    const creator = new ThreadsContentCreator();
    let result;

    switch (action) {
      case 'generate_ideas':
        result = await creator.generateContentIdeas(
          params.topic,
          params.count || 5,
          params.targetAudience
        );
        break;

      case 'apply_template':
        result = creator.applyTemplate(
          params.templateId,
          params.variables
        );
        break;

      case 'optimize':
        result = creator.optimizeContent(params.content);
        break;

      case 'best_times':
        result = creator.getBestPostingTimes(
          params.audience,
          params.timezone
        );
        break;

      case 'suggest_hashtags':
        result = creator.generateHashtags(
          params.topic,
          params.count || 5
        );
        break;

      case 'get_templates':
        result = creator.getTemplates();
        break;

      default:
        return NextResponse.json(
          { error: 'Invalid action' },
          { status: 400 }
        );
    }

    return NextResponse.json({ success: true, data: result });
  } catch (error) {
    console.error('Content generation error:', error);
    return NextResponse.json(
      { error: 'Failed to generate content' },
      { status: 500 }
    );
  }
}

export async function GET() {
  const creator = new ThreadsContentCreator();
  const templates = creator.getTemplates();
  
  return NextResponse.json({
    templates,
    actions: [
      'generate_ideas',
      'apply_template',
      'optimize',
      'best_times',
      'suggest_hashtags',
      'get_templates'
    ],
    info: {
      description: 'Threads Content Creation API',
      version: '1.0.0'
    }
  });
}
</file>

<file path="src/app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from 'next';
import { Geist, Geist_Mono } from 'next/font/google';
import './globals.css';
import Providers from './providers';

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
});

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
});

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Providers>{children}</Providers>
      </body>
    </html>
  );
}
</file>

<file path="src/app/page.tsx">
'use client';

import { Button } from '@/components/ui/button';
import { CheckCircle, Github, Copy, Sparkles } from 'lucide-react';
import React, { useEffect, useState } from 'react';
import { useToast } from '@/hooks/use-toast';
import axios from 'axios';

const PACKAGE_NAME = '@easynext/cli';
const CURRENT_VERSION = 'v0.1.35';

function latestVersion(packageName: string) {
  return axios
    .get('https://registry.npmjs.org/' + packageName + '/latest')
    .then((res) => res.data.version);
}

export default function Home() {
  const { toast } = useToast();
  const [latest, setLatest] = useState<string | null>(null);

  useEffect(() => {
    const fetchLatestVersion = async () => {
      try {
        const version = await latestVersion(PACKAGE_NAME);
        setLatest(`v${version}`);
      } catch (error) {
        console.error('Failed to fetch version info:', error);
      }
    };
    fetchLatestVersion();
  }, []);

  const handleCopyCommand = () => {
    navigator.clipboard.writeText(`npm install -g ${PACKAGE_NAME}@latest`);
    toast({
      description: 'Update command copied to clipboard',
    });
  };

  const needsUpdate = latest && latest !== CURRENT_VERSION;

  return (
    <div className="flex min-h-screen relative overflow-hidden">
      {/* Main Content */}
      <div className="min-h-screen flex bg-gray-100">
        <div className="flex flex-col p-5 md:p-8 space-y-4">
          <h1 className="text-3xl md:text-5xl font-semibold tracking-tighter !leading-tight text-left">
            Easiest way to start
            <br /> Next.js project
            <br /> with Cursor
          </h1>

          <p className="text-lg text-muted-foreground">
            Get Pro-created Next.js bootstrap just in seconds
          </p>

          <div className="flex items-center gap-2">
            <Button
              asChild
              size="lg"
              variant="secondary"
              className="gap-2 w-fit rounded-full px-4 py-2 border border-black"
            >
              <a href="https://github.com/easynextjs/easynext" target="_blank">
                <Github className="w-4 h-4" />
                GitHub
              </a>
            </Button>
            <Button
              asChild
              size="lg"
              variant="secondary"
              className="gap-2 w-fit rounded-full px-4 py-2 bg-yellow-600 hover:bg-yellow-700 text-white"
            >
              <a href="https://easynext.org/premium" target="_blank">
                <Sparkles className="w-4 h-4" />
                Premium
              </a>
            </Button>
          </div>
          <Section />
        </div>
      </div>

      <div className="min-h-screen ml-16 flex-1 flex flex-col items-center justify-center space-y-4">
        <div className="flex flex-col items-center space-y-2">
          <p className="text-muted-foreground">
            Current Version: {CURRENT_VERSION}
          </p>
          <p className="text-muted-foreground">
            Latest Version:{' '}
            <span className="font-bold">{latest || 'Loading...'}</span>
          </p>
        </div>

        {needsUpdate && (
          <div className="flex flex-col items-center space-y-2">
            <p className="text-yellow-600">New version available!</p>
            <p className="text-sm text-muted-foreground">
              Copy and run the command below to update:
            </p>
            <div className="relative group">
              <pre className="bg-gray-100 p-4 rounded-lg">
                npm install -g {PACKAGE_NAME}@latest
              </pre>
              <button
                onClick={handleCopyCommand}
                className="absolute top-2 right-2 p-2 opacity-0 group-hover:opacity-100 transition-opacity"
              >
                <Copy className="w-4 h-4" />
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

function Section() {
  const items = [
    { href: 'https://nextjs.org/', label: 'Next.js' },
    { href: 'https://ui.shadcn.com/', label: 'shadcn/ui' },
    { href: 'https://tailwindcss.com/', label: 'Tailwind CSS' },
    { href: 'https://www.framer.com/motion/', label: 'framer-motion' },
    { href: 'https://zod.dev/', label: 'zod' },
    { href: 'https://date-fns.org/', label: 'date-fns' },
    { href: 'https://ts-pattern.dev/', label: 'ts-pattern' },
    { href: 'https://es-toolkit.dev/', label: 'es-toolkit' },
    { href: 'https://zustand.docs.pmnd.rs/', label: 'zustand' },
    { href: 'https://supabase.com/', label: 'supabase' },
    { href: 'https://react-hook-form.com/', label: 'react-hook-form' },
  ];

  return (
    <div className="flex flex-col py-5 md:py-8 space-y-2 opacity-75">
      <p className="font-semibold">What&apos;s Included</p>

      <div className="flex flex-col space-y-1 text-muted-foreground">
        {items.map((item) => (
          <SectionItem key={item.href} href={item.href}>
            {item.label}
          </SectionItem>
        ))}
      </div>
    </div>
  );
}

function SectionItem({
  children,
  href,
}: {
  children: React.ReactNode;
  href: string;
}) {
  return (
    <a
      href={href}
      className="flex items-center gap-2 underline"
      target="_blank"
    >
      <CheckCircle className="w-4 h-4" />
      <p>{children}</p>
    </a>
  );
}
</file>

<file path="src/app/providers.tsx">
// In Next.js, this file would be called: app/providers.tsx
'use client';

// Since QueryClientProvider relies on useContext under the hood, we have to put 'use client' on top
import {
  isServer,
  QueryClient,
  QueryClientProvider,
} from '@tanstack/react-query';
import { ThemeProvider } from 'next-themes';

function makeQueryClient() {
  return new QueryClient({
    defaultOptions: {
      queries: {
        // With SSR, we usually want to set some default staleTime
        // above 0 to avoid refetching immediately on the client
        staleTime: 60 * 1000,
      },
    },
  });
}

let browserQueryClient: QueryClient | undefined = undefined;

function getQueryClient() {
  if (isServer) {
    // Server: always make a new query client
    return makeQueryClient();
  } else {
    // Browser: make a new query client if we don't already have one
    // This is very important, so we don't re-make a new client if React
    // suspends during the initial render. This may not be needed if we
    // have a suspense boundary BELOW the creation of the query client
    if (!browserQueryClient) browserQueryClient = makeQueryClient();
    return browserQueryClient;
  }
}

export default function Providers({ children }: { children: React.ReactNode }) {
  // NOTE: Avoid useState when initializing the query client if you don't
  //       have a suspense boundary between this and the code that may
  //       suspend because React will throw away the client on the initial
  //       render if it suspends and there is no boundary
  const queryClient = getQueryClient();

  return (
    <ThemeProvider
      attribute="class"
      defaultTheme="system"
      enableSystem
      disableTransitionOnChange
    >
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </ThemeProvider>
  );
}
</file>

<file path="src/components/threads/ContentCreatorUI.tsx">
'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { 
  Sparkles, 
  Hash, 
  Clock, 
  TrendingUp, 
  Copy,
  RefreshCw,
  Send,
  BookOpen,
  Lightbulb,
  Target
} from 'lucide-react';

export default function ContentCreatorUI() {
  const [topic, setTopic] = useState('');
  const [generatedIdeas, setGeneratedIdeas] = useState<any[]>([]);
  const [selectedTemplate, setSelectedTemplate] = useState('');
  const [contentText, setContentText] = useState('');
  const [optimizedContent, setOptimizedContent] = useState<any>(null);
  const [loading, setLoading] = useState(false);

  // ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ±
  const generateIdeas = async () => {
    if (!topic) return;
    
    setLoading(true);
    try {
      const response = await fetch('/api/threads-content', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'generate_ideas',
          topic,
          count: 5
        })
      });
      
      const data = await response.json();
      if (data.success) {
        setGeneratedIdeas(data.data);
      }
    } catch (error) {
      console.error('Failed to generate ideas:', error);
    }
    setLoading(false);
  };

  // ÏΩòÌÖêÏ∏† ÏµúÏ†ÅÌôî
  const optimizeContent = async () => {
    if (!contentText) return;
    
    setLoading(true);
    try {
      const response = await fetch('/api/threads-content', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'optimize',
          content: contentText
        })
      });
      
      const data = await response.json();
      if (data.success) {
        setOptimizedContent(data.data);
      }
    } catch (error) {
      console.error('Failed to optimize content:', error);
    }
    setLoading(false);
  };

  // ÌÅ¥Î¶ΩÎ≥¥Îìú Î≥µÏÇ¨
  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    // Toast ÏïåÎ¶º Ï∂îÍ∞Ä Í∞ÄÎä•
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Threads ÏΩòÌÖêÏ∏† ÏûëÏÑ± ÎèÑÏö∞ÎØ∏</h1>
          <p className="text-muted-foreground mt-2">
            AI Í∏∞Î∞ò ÏΩòÌÖêÏ∏† ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ± Î∞è ÏµúÏ†ÅÌôî
          </p>
        </div>
      </div>

      <Tabs defaultValue="ideas" className="space-y-4">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="ideas">
            <Lightbulb className="w-4 h-4 mr-2" />
            ÏïÑÏù¥ÎîîÏñ¥
          </TabsTrigger>
          <TabsTrigger value="templates">
            <BookOpen className="w-4 h-4 mr-2" />
            ÌÖúÌîåÎ¶ø
          </TabsTrigger>
          <TabsTrigger value="optimize">
            <Sparkles className="w-4 h-4 mr-2" />
            ÏµúÏ†ÅÌôî
          </TabsTrigger>
          <TabsTrigger value="schedule">
            <Clock className="w-4 h-4 mr-2" />
            Ïä§ÏºÄÏ§Ñ
          </TabsTrigger>
        </TabsList>

        {/* ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ± ÌÉ≠ */}
        <TabsContent value="ideas" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>AI ÏΩòÌÖêÏ∏† ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ±</CardTitle>
              <CardDescription>
                Ï£ºÏ†úÎ•º ÏûÖÎ†•ÌïòÎ©¥ Í¥ÄÎ†® ÏΩòÌÖêÏ∏† ÏïÑÏù¥ÎîîÏñ¥Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex gap-2">
                <Input
                  placeholder="Ïòà: AI ÎßàÏºÄÌåÖ, Ïä§ÌÉÄÌä∏ÏóÖ ÏÑ±Ïû• Ï†ÑÎûµ..."
                  value={topic}
                  onChange={(e) => setTopic(e.target.value)}
                  className="flex-1"
                />
                <Button onClick={generateIdeas} disabled={loading}>
                  <RefreshCw className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
                  ÏÉùÏÑ±ÌïòÍ∏∞
                </Button>
              </div>

              {generatedIdeas.length > 0 && (
                <ScrollArea className="h-[400px] w-full rounded-md border p-4">
                  <div className="space-y-4">
                    {generatedIdeas.map((idea, index) => (
                      <Card key={index}>
                        <CardContent className="p-4">
                          <div className="space-y-3">
                            <div className="flex items-start justify-between">
                              <h3 className="font-semibold">{idea.hook}</h3>
                              <Button
                                size="sm"
                                variant="ghost"
                                onClick={() => copyToClipboard(
                                  `${idea.hook}\n\n${idea.body}\n\n${idea.cta}\n\n${idea.hashtags.join(' ')}`
                                )}
                              >
                                <Copy className="w-4 h-4" />
                              </Button>
                            </div>
                            <p className="text-sm whitespace-pre-line">{idea.body}</p>
                            <p className="text-sm font-medium">{idea.cta}</p>
                            <div className="flex flex-wrap gap-1">
                              {idea.hashtags.map((tag: string, i: number) => (
                                <Badge key={i} variant="secondary">
                                  {tag}
                                </Badge>
                              ))}
                            </div>
                            <div className="flex items-center gap-2 text-xs text-muted-foreground">
                              <TrendingUp className="w-3 h-3" />
                              ÏòàÏÉÅ Ï∞∏Ïó¨: {idea.estimatedEngagement}
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </ScrollArea>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* ÌÖúÌîåÎ¶ø ÌÉ≠ */}
        <TabsContent value="templates" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>ÏΩòÌÖêÏ∏† ÌÖúÌîåÎ¶ø</CardTitle>
              <CardDescription>
                Í≤ÄÏ¶ùÎêú ÌÖúÌîåÎ¶øÏùÑ ÌôúÏö©Ìï¥ Îπ†Î•¥Í≤å ÏΩòÌÖêÏ∏†Î•º ÏûëÏÑ±ÌïòÏÑ∏Ïöî
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid gap-4 md:grid-cols-2">
                {[
                  { id: 'product-launch', name: 'Ïã†Ï†úÌíà Ï∂úÏãú', icon: 'üöÄ' },
                  { id: 'tips-and-tricks', name: 'ÌåÅ & Ìä∏Î¶≠', icon: 'üí°' },
                  { id: 'user-testimonial', name: 'Í≥†Í∞ù ÌõÑÍ∏∞', icon: 'üåü' },
                  { id: 'behind-the-scenes', name: 'ÎπÑÌïòÏù∏Îìú', icon: 'üëÄ' },
                  { id: 'question-engagement', name: 'ÏßàÎ¨∏Ìòï', icon: 'ü§î' }
                ].map((template) => (
                  <Card 
                    key={template.id}
                    className="cursor-pointer hover:border-primary"
                    onClick={() => setSelectedTemplate(template.id)}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-center gap-3">
                        <span className="text-2xl">{template.icon}</span>
                        <div>
                          <h4 className="font-semibold">{template.name}</h4>
                          <p className="text-xs text-muted-foreground">
                            ÌÅ¥Î¶≠ÌïòÏó¨ ÌÖúÌîåÎ¶ø ÏÇ¨Ïö©
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* ÏµúÏ†ÅÌôî ÌÉ≠ */}
        <TabsContent value="optimize" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>ÏΩòÌÖêÏ∏† ÏµúÏ†ÅÌôî</CardTitle>
              <CardDescription>
                ÏûëÏÑ±Ìïú ÏΩòÌÖêÏ∏†Î•º Î∂ÑÏÑùÌïòÍ≥† Í∞úÏÑ†Ï†êÏùÑ Ï†úÏïàÌï©ÎãàÎã§
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <Textarea
                placeholder="ÏµúÏ†ÅÌôîÌï† ÏΩòÌÖêÏ∏†Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                value={contentText}
                onChange={(e) => setContentText(e.target.value)}
                className="min-h-[200px]"
              />
              <Button onClick={optimizeContent} disabled={loading}>
                <Sparkles className="w-4 h-4 mr-2" />
                ÏµúÏ†ÅÌôî Î∂ÑÏÑù
              </Button>

              {optimizedContent && (
                <div className="space-y-4">
                  <Separator />
                  <div>
                    <h4 className="font-semibold mb-2">ÏµúÏ†ÅÌôîÎêú ÏΩòÌÖêÏ∏†</h4>
                    <Card>
                      <CardContent className="p-4">
                        <p className="whitespace-pre-line">{optimizedContent.optimized}</p>
                      </CardContent>
                    </Card>
                  </div>
                  <div>
                    <h4 className="font-semibold mb-2">Í∞úÏÑ† Ï†úÏïà</h4>
                    <div className="space-y-2">
                      {optimizedContent.suggestions.map((suggestion: string, i: number) => (
                        <div key={i} className="flex items-start gap-2">
                          <Target className="w-4 h-4 mt-0.5 text-primary" />
                          <p className="text-sm">{suggestion}</p>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Ïä§ÏºÄÏ§Ñ ÌÉ≠ */}
        <TabsContent value="schedule" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>ÏµúÏ†Å ÏóÖÎ°úÎìú ÏãúÍ∞Ñ</CardTitle>
              <CardDescription>
                ÌÉÄÍ≤ü Ïò§ÎîîÏñ∏Ïä§Ïóê Îî∞Î•∏ ÏµúÏ†ÅÏùò ÏóÖÎ°úÎìú ÏãúÍ∞ÑÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <Select defaultValue="general">
                  <SelectTrigger>
                    <SelectValue placeholder="ÌÉÄÍ≤ü Ïò§ÎîîÏñ∏Ïä§ ÏÑ†ÌÉù" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="general">ÏùºÎ∞ò</SelectItem>
                    <SelectItem value="business">ÎπÑÏ¶àÎãàÏä§</SelectItem>
                    <SelectItem value="young">Ï†äÏùÄÏ∏µ</SelectItem>
                    <SelectItem value="global">Í∏ÄÎ°úÎ≤å</SelectItem>
                  </SelectContent>
                </Select>

                <div className="grid grid-cols-4 gap-2">
                  {['09:00', '12:00', '18:00', '20:00'].map((time) => (
                    <Card key={time}>
                      <CardContent className="p-3 text-center">
                        <Clock className="w-4 h-4 mx-auto mb-1" />
                        <p className="font-semibold">{time}</p>
                        <p className="text-xs text-muted-foreground">KST</p>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
</file>

<file path="src/components/ui/accordion.tsx">
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="src/components/ui/avatar.tsx">
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/checkbox.tsx">
"use client";

import * as React from "react";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import { Check } from "lucide-react";

import { cn } from "@/lib/utils";

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className,
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };
</file>

<file path="src/components/ui/dropdown-menu.tsx">
"use client";

import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};
</file>

<file path="src/components/ui/file-upload.tsx">
"use client";

import { cn } from "@/lib/utils";
import { ChangeEvent, useRef } from "react";

interface FileUploadProps extends React.HTMLAttributes<HTMLDivElement> {
  onFileChange: (file: File) => void;
  accept?: string;
}

export function FileUpload({
  className,
  onFileChange,
  accept = "image/*",
  children,
  ...props
}: FileUploadProps) {
  const inputRef = useRef<HTMLInputElement>(null);

  const handleClick = () => {
    inputRef.current?.click();
  };

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      onFileChange(file);
    }
  };

  return (
    <div
      onClick={handleClick}
      className={cn(
        "cursor-pointer rounded-md border-2 border-dashed border-gray-300 p-4 hover:border-gray-400",
        className
      )}
      {...props}
    >
      <input
        type="file"
        ref={inputRef}
        onChange={handleChange}
        accept={accept}
        className="hidden"
      />
      {children}
    </div>
  );
}
</file>

<file path="src/components/ui/form.tsx">
'use client';

import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { Slot } from '@radix-ui/react-slot';
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from 'react-hook-form';

import { cn } from '@/lib/utils';
import { Label } from '@/components/ui/label';

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue,
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error('useFormField should be used within <FormField>');
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue,
);

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn('space-y-2', className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = 'FormItem';

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && 'text-destructive', className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = 'FormLabel';

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = 'FormControl';

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn('text-sm text-muted-foreground', className)}
      {...props}
    />
  );
});
FormDescription.displayName = 'FormDescription';

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn('text-sm font-medium text-destructive', className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = 'FormMessage';

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react";

import { cn } from "@/lib/utils";

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };
</file>

<file path="src/components/ui/label.tsx">
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };
</file>

<file path="src/components/ui/select.tsx">
'use client';

import * as React from 'react';
import * as SelectPrimitive from '@radix-ui/react-select';
import { Check, ChevronDown, ChevronUp } from 'lucide-react';

import { cn } from '@/lib/utils';

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      'flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',
      className,
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className,
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className,
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = 'popper', ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        position === 'popper' &&
          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
        className,
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          'p-1',
          position === 'popper' &&
            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]',
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn('py-1.5 pl-8 pr-2 text-sm font-semibold', className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};
</file>

<file path="src/components/ui/separator.tsx">
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="src/components/ui/sheet.tsx">
'use client';

import * as React from 'react';
import * as SheetPrimitive from '@radix-ui/react-dialog';
import { cva, type VariantProps } from 'class-variance-authority';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className,
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',
  {
    variants: {
      side: {
        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',
        bottom:
          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',
        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',
        right:
          'inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',
      },
    },
    defaultVariants: {
      side: 'right',
    },
  },
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = 'right', className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-2 text-center sm:text-left',
      className,
    )}
    {...props}
  />
);
SheetHeader.displayName = 'SheetHeader';

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className,
    )}
    {...props}
  />
);
SheetFooter.displayName = 'SheetFooter';

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold text-foreground', className)}
    {...props}
  />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};
</file>

<file path="src/components/ui/textarea.tsx">
import * as React from 'react';

import { cn } from '@/lib/utils';

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<'textarea'>
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
        className,
      )}
      ref={ref}
      {...props}
    />
  );
});
Textarea.displayName = 'Textarea';

export { Textarea };
</file>

<file path="src/components/ui/toast.tsx">
'use client';

import * as React from 'react';
import * as ToastPrimitives from '@radix-ui/react-toast';
import { cva, type VariantProps } from 'class-variance-authority';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',
      className,
    )}
    {...props}
  />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',
  {
    variants: {
      variant: {
        default: 'border bg-background text-foreground',
        destructive:
          'destructive group border-destructive bg-destructive text-destructive-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  },
);

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  );
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',
      className,
    )}
    {...props}
  />
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',
      className,
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn('text-sm font-semibold', className)}
    {...props}
  />
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn('text-sm opacity-90', className)}
    {...props}
  />
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

type ToastActionElement = React.ReactElement<typeof ToastAction>;

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
};
</file>

<file path="src/components/ui/toaster.tsx">
'use client';

import { useToast } from '@/hooks/use-toast';
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from '@/components/ui/toast';

export function Toaster() {
  const { toasts } = useToast();

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        );
      })}
      <ToastViewport />
    </ToastProvider>
  );
}
</file>

<file path="src/hooks/use-toast.ts">
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="src/lib/report/generator.ts">
/**
 * Threads Analytics Report Generator
 * Ï£ºÍ∞Ñ/ÏõîÍ∞Ñ Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Î∞è Í≥µÏú† ÏãúÏä§ÌÖú
 */

import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';
import nodemailer from 'nodemailer';
import { Octokit } from '@octokit/rest';

export interface ReportConfig {
  account: string;
  platform: 'threads' | 'instagram' | 'tiktok';
  type: 'daily' | 'weekly' | 'monthly';
  format: 'pdf' | 'html' | 'json';
  shareOptions?: {
    email?: string[];
    github?: {
      repo: string;
      branch: string;
      token: string;
    };
    mcp?: {
      storage: boolean;
      dashboard: boolean;
    };
  };
}

export interface ThreadsAnalytics {
  account: string;
  period: {
    start: Date;
    end: Date;
  };
  metrics: {
    followers: {
      current: number;
      growth: number;
      growthRate: number;
    };
    engagement: {
      likes: number;
      replies: number;
      reposts: number;
      rate: number;
    };
    posts: {
      total: number;
      avgPerDay: number;
      topPosts: Array<{
        id: string;
        content: string;
        engagement: number;
        timestamp: Date;
      }>;
    };
    audience: {
      peakHours: string[];
      demographics: {
        age: Record<string, number>;
        location: Record<string, number>;
      };
    };
  };
  insights: {
    trends: string[];
    recommendations: string[];
    competitors: Array<{
      account: string;
      comparison: Record<string, number>;
    }>;
  };
}

export class ReportGenerator {
  private config: ReportConfig;
  private analytics: ThreadsAnalytics | null = null;

  constructor(config: ReportConfig) {
    this.config = config;
  }

  /**
   * Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Î©îÏù∏ Ìï®Ïàò
   */
  async generateReport(): Promise<string> {
    // 1. Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
    this.analytics = await this.collectAnalytics();
    
    // 2. Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
    const reportPath = await this.createReport();
    
    // 3. Í≥µÏú† Ï≤òÎ¶¨
    if (this.config.shareOptions) {
      await this.shareReport(reportPath);
    }
    
    return reportPath;
  }

  /**
   * Threads Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
   */
  private async collectAnalytics(): Promise<ThreadsAnalytics> {
    // TODO: Ïã§Ï†ú Threads API Ïó∞Îèô
    const mockData: ThreadsAnalytics = {
      account: this.config.account,
      period: {
        start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
        end: new Date(),
      },
      metrics: {
        followers: {
          current: 5420,
          growth: 320,
          growthRate: 6.27,
        },
        engagement: {
          likes: 15234,
          replies: 892,
          reposts: 456,
          rate: 4.8,
        },
        posts: {
          total: 28,
          avgPerDay: 4,
          topPosts: [
            {
              id: '1',
              content: 'Ïã†Ï†úÌíà Ï∂úÏãú Ïù¥Î≤§Ìä∏ üéâ',
              engagement: 3421,
              timestamp: new Date('2025-08-20'),
            },
            {
              id: '2',
              content: 'Í≥†Í∞ù ÌõÑÍ∏∞ Î™®Ïùå üíù',
              engagement: 2156,
              timestamp: new Date('2025-08-18'),
            },
          ],
        },
        audience: {
          peakHours: ['18:00', '19:00', '20:00'],
          demographics: {
            age: {
              '18-24': 32,
              '25-34': 45,
              '35-44': 18,
              '45+': 5,
            },
            location: {
              'ÏÑúÏö∏': 42,
              'Í≤ΩÍ∏∞': 28,
              'Î∂ÄÏÇ∞': 12,
              'Í∏∞ÌÉÄ': 18,
            },
          },
        },
      },
      insights: {
        trends: [
          'Ïù¥Î≤§Ìä∏ Í¥ÄÎ†® Í≤åÏãúÎ¨º Ï∞∏Ïó¨Ïú® ÏµúÍ≥†',
          'Ï†ÄÎÖÅ ÏãúÍ∞ÑÎåÄ ÌôúÎèô ÏßëÏ§ë',
          'Ïù¥ÎØ∏ÏßÄ Ìè¨Ìï® Í≤åÏãúÎ¨º ÏÑ†Ìò∏',
        ],
        recommendations: [
          '18-20Ïãú ÏÇ¨Ïù¥ Ï£ºÏöî ÏΩòÌÖêÏ∏† Î∞úÌñâ Í∂åÏû•',
          'Ï£º 2-3Ìöå Ïù¥Î≤§Ìä∏/ÌîÑÎ°úÎ™®ÏÖò ÏßÑÌñâ',
          'Í≥†ÌíàÏßà Ïù¥ÎØ∏ÏßÄ ÏΩòÌÖêÏ∏† ÎπÑÏ§ë Ï¶ùÍ∞Ä',
        ],
        competitors: [
          {
            account: 'clickmate_seller',
            comparison: {
              followers: -15,
              engagement: 12,
              posts: 5,
            },
          },
        ],
      },
    };

    return mockData;
  }

  /**
   * PDF Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
   */
  private async createReport(): Promise<string> {
    if (!this.analytics) throw new Error('No analytics data');

    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.getWidth();
    
    // Ï†úÎ™©
    pdf.setFontSize(20);
    pdf.text('Threads Analytics Report', pageWidth / 2, 20, { align: 'center' });
    
    // Í≥ÑÏ†ï Ï†ïÎ≥¥
    pdf.setFontSize(12);
    pdf.text(`Account: @${this.config.account}`, 20, 35);
    pdf.text(`Period: ${this.config.type}`, 20, 42);
    pdf.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 49);
    
    // Ï£ºÏöî ÏßÄÌëú
    pdf.setFontSize(14);
    pdf.text('Key Metrics', 20, 65);
    pdf.setFontSize(10);
    pdf.text(`Followers: ${this.analytics.metrics.followers.current} (+${this.analytics.metrics.followers.growth})`, 20, 75);
    pdf.text(`Engagement Rate: ${this.analytics.metrics.engagement.rate}%`, 20, 82);
    pdf.text(`Total Posts: ${this.analytics.metrics.posts.total}`, 20, 89);
    
    // Ïù∏ÏÇ¨Ïù¥Ìä∏
    pdf.setFontSize(14);
    pdf.text('Insights & Recommendations', 20, 105);
    pdf.setFontSize(10);
    this.analytics.insights.recommendations.forEach((rec, i) => {
      pdf.text(`‚Ä¢ ${rec}`, 20, 115 + (i * 7));
    });
    
    // ÌååÏùº Ï†ÄÏû•
    const fileName = `threads_${this.config.type}_${Date.now()}.pdf`;
    const filePath = `/tmp/${fileName}`;
    pdf.save(filePath);
    
    return filePath;
  }

  /**
   * Î¶¨Ìè¨Ìä∏ Í≥µÏú† Ï≤òÎ¶¨
   */
  private async shareReport(reportPath: string): Promise<void> {
    const { shareOptions } = this.config;
    
    // Ïù¥Î©îÏùº Î∞úÏÜ°
    if (shareOptions?.email) {
      await this.sendEmail(reportPath, shareOptions.email);
    }
    
    // GitHub ÏóÖÎ°úÎìú
    if (shareOptions?.github) {
      await this.uploadToGithub(reportPath, shareOptions.github);
    }
    
    // MCP Ï†ÄÏû•ÏÜå
    if (shareOptions?.mcp?.storage) {
      await this.saveToMCP(reportPath);
    }
    
    // MCP ÎåÄÏãúÎ≥¥Îìú
    if (shareOptions?.mcp?.dashboard) {
      await this.uploadToDashboard(reportPath);
    }
  }

  /**
   * Ïù¥Î©îÏùº Î∞úÏÜ°
   */
  private async sendEmail(reportPath: string, recipients: string[]): Promise<void> {
    const transporter = nodemailer.createTransporter({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: recipients.join(', '),
      subject: `Threads ${this.config.type} Report - ${this.config.account}`,
      text: `Please find attached the ${this.config.type} analytics report for @${this.config.account}`,
      attachments: [
        {
          filename: `threads_report_${this.config.type}.pdf`,
          path: reportPath,
        },
      ],
    };

    await transporter.sendMail(mailOptions);
    console.log(`Report sent to: ${recipients.join(', ')}`);
  }

  /**
   * GitHub Ï†ÄÏû•ÏÜå ÏóÖÎ°úÎìú
   */
  private async uploadToGithub(
    reportPath: string,
    githubConfig: { repo: string; branch: string; token: string }
  ): Promise<void> {
    const octokit = new Octokit({ auth: githubConfig.token });
    const [owner, repo] = githubConfig.repo.split('/');
    
    // ÌååÏùº ÏùΩÍ∏∞
    const fs = require('fs');
    const content = fs.readFileSync(reportPath, { encoding: 'base64' });
    
    // GitHubÏóê ÏóÖÎ°úÎìú
    await octokit.repos.createOrUpdateFileContents({
      owner,
      repo,
      path: `reports/${this.config.type}/${Date.now()}_report.pdf`,
      message: `Add Threads ${this.config.type} analysis for ${this.config.account}`,
      content,
      branch: githubConfig.branch,
    });
    
    console.log(`Report uploaded to GitHub: ${githubConfig.repo}`);
  }

  /**
   * MCP Ï†ÄÏû•ÏÜå Ï†ÄÏû•
   */
  private async saveToMCP(reportPath: string): Promise<void> {
    // MCP memory ÏÑúÎ≤Ñ ÌôúÏö©
    console.log(`Report saved to MCP storage: ${reportPath}`);
    // TODO: MCP memory API Ïó∞Îèô
  }

  /**
   * MCP ÎåÄÏãúÎ≥¥Îìú ÏóÖÎ°úÎìú
   */
  private async uploadToDashboard(reportPath: string): Promise<void> {
    // MCP ÎåÄÏãúÎ≥¥Îìú API Ïó∞Îèô
    console.log(`Report uploaded to MCP dashboard: ${reportPath}`);
    // TODO: MCP dashboard API Ïó∞Îèô
  }
}

// CLI Î™ÖÎ†πÏñ¥ ÌååÏÑú
export function parseCommand(command: string): ReportConfig {
  const parts = command.split(' ');
  const config: ReportConfig = {
    account: '',
    platform: 'threads',
    type: 'weekly',
    format: 'pdf',
  };

  for (let i = 0; i < parts.length; i++) {
    switch (parts[i]) {
      case '--account':
        config.account = parts[i + 1];
        break;
      case '--platform':
        config.platform = parts[i + 1] as any;
        break;
      case '--type':
        config.type = parts[i + 1] as any;
        break;
      case '--format':
        config.format = parts[i + 1] as any;
        break;
      case '--share':
        if (!config.shareOptions) config.shareOptions = {};
        config.shareOptions.email = [parts[i + 1]];
        break;
    }
  }

  return config;
}
</file>

<file path="src/lib/threads-content/content-creator.ts">
/**
 * Threads Content Creator
 * Ïì∞Î†àÎìú ÏΩòÌÖêÏ∏† ÏûëÏÑ± ÎèÑÏö∞ÎØ∏
 */

export interface ThreadsContent {
  text: string;
  hashtags: string[];
  mediaUrls?: string[];
  mentions?: string[];
  scheduledTime?: Date;
  contentType: 'text' | 'image' | 'video' | 'carousel';
  category: string;
  targetAudience: string;
}

export interface ContentTemplate {
  id: string;
  name: string;
  category: string;
  template: string;
  variables: string[];
  exampleOutput: string;
  bestTimeToPost: string[];
}

export interface ContentIdea {
  topic: string;
  hook: string;
  body: string;
  cta: string;
  hashtags: string[];
  estimatedEngagement: number;
}

export class ThreadsContentCreator {
  private templates: ContentTemplate[] = [
    {
      id: 'product-launch',
      name: 'Ïã†Ï†úÌíà Ï∂úÏãú',
      category: 'marketing',
      template: 'üöÄ [Ï†úÌíàÎ™Ö] Ï∂úÏãú!\n\n[ÌïµÏã¨ Í∏∞Îä• 3Í∞ÄÏßÄ]\n‚ú® [Í∏∞Îä•1]\n‚ú® [Í∏∞Îä•2]\n‚ú® [Í∏∞Îä•3]\n\n[ÌäπÎ≥Ñ ÌòúÌÉù]\n\nÏßÄÍ∏à Î∞îÎ°ú ÌôïÏù∏ÌïòÏÑ∏Ïöî üëâ [ÎßÅÌÅ¨]',
      variables: ['Ï†úÌíàÎ™Ö', 'Í∏∞Îä•1', 'Í∏∞Îä•2', 'Í∏∞Îä•3', 'ÌäπÎ≥Ñ ÌòúÌÉù', 'ÎßÅÌÅ¨'],
      exampleOutput: 'üöÄ AI ÎßàÏºÄÌåÖ ÎåÄÏãúÎ≥¥Îìú Ï∂úÏãú!\n\n‚ú® Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù\n‚ú® ÏûêÎèô Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±\n‚ú® Í≤ΩÏüÅÏÇ¨ Î≤§ÏπòÎßàÌÇπ\n\nüéÅ Ï≤´ Îã¨ 50% Ìï†Ïù∏\n\nÏßÄÍ∏à Î∞îÎ°ú ÌôïÏù∏ÌïòÏÑ∏Ïöî üëâ link.com',
      bestTimeToPost: ['09:00', '12:00', '19:00']
    },
    {
      id: 'tips-and-tricks',
      name: 'ÌåÅ & Ìä∏Î¶≠',
      category: 'education',
      template: 'üí° [Ï£ºÏ†ú] ÍøÄÌåÅ [Ïà´Ïûê]Í∞ÄÏßÄ\n\n1Ô∏è‚É£ [ÌåÅ1]\n2Ô∏è‚É£ [ÌåÅ2]\n3Ô∏è‚É£ [ÌåÅ3]\n\nÎ∂ÅÎßàÌÅ¨ÌïòÍ≥† ÎÇòÏ§ëÏóê ÌôúÏö©ÌïòÏÑ∏Ïöî! üìå\n\nÎçî ÎßéÏùÄ ÌåÅÏùÄ ÌîÑÎ°úÌïÑ ÎßÅÌÅ¨ÏóêÏÑú üëÜ',
      variables: ['Ï£ºÏ†ú', 'Ïà´Ïûê', 'ÌåÅ1', 'ÌåÅ2', 'ÌåÅ3'],
      exampleOutput: 'üí° ÎßàÏºÄÌåÖ ÏÑ±Í≥º ÎÜíÏù¥Îäî ÍøÄÌåÅ 3Í∞ÄÏßÄ\n\n1Ô∏è‚É£ Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò ÏùòÏÇ¨Í≤∞Ï†ï\n2Ô∏è‚É£ A/B ÌÖåÏä§Ìä∏ ÌôúÏö©\n3Ô∏è‚É£ Í≥†Í∞ù ÌîºÎìúÎ∞± Î∞òÏòÅ\n\nÎ∂ÅÎßàÌÅ¨ÌïòÍ≥† ÎÇòÏ§ëÏóê ÌôúÏö©ÌïòÏÑ∏Ïöî! üìå',
      bestTimeToPost: ['10:00', '14:00', '20:00']
    },
    {
      id: 'user-testimonial',
      name: 'Í≥†Í∞ù ÌõÑÍ∏∞',
      category: 'social-proof',
      template: 'üåü Í≥†Í∞ùÎãòÏùò ÏÜåÏ§ëÌïú ÌõÑÍ∏∞\n\n"[ÌõÑÍ∏∞ ÎÇ¥Ïö©]"\n\n- [Í≥†Í∞ùÎ™Ö/ÏßÅÏ±Ö]\n\n[Ï†úÌíà/ÏÑúÎπÑÏä§]Î•º ÌÜµÌï¥ [Í≤∞Í≥º]Î•º Îã¨ÏÑ±ÌïòÏÖ®ÏäµÎãàÎã§! üéØ\n\n#Í≥†Í∞ùÌõÑÍ∏∞ #[Ï†úÌíàÎ™Ö]',
      variables: ['ÌõÑÍ∏∞ ÎÇ¥Ïö©', 'Í≥†Í∞ùÎ™Ö/ÏßÅÏ±Ö', 'Ï†úÌíà/ÏÑúÎπÑÏä§', 'Í≤∞Í≥º', 'Ï†úÌíàÎ™Ö'],
      exampleOutput: 'üåü Í≥†Í∞ùÎãòÏùò ÏÜåÏ§ëÌïú ÌõÑÍ∏∞\n\n"Îß§Ï∂úÏù¥ 3Í∞úÏõî ÎßåÏóê 200% ÏÑ±Ïû•ÌñàÏñ¥Ïöî!"\n\n- ÍπÄÎåÄÌëú/Ïä§ÌÉÄÌä∏ÏóÖ CEO\n\nAI ÎßàÏºÄÌåÖ ÎèÑÍµ¨Î•º ÌÜµÌï¥ ÎÜÄÎùºÏö¥ ÏÑ±Í≥ºÎ•º Îã¨ÏÑ±ÌïòÏÖ®ÏäµÎãàÎã§! üéØ',
      bestTimeToPost: ['11:00', '15:00', '18:00']
    },
    {
      id: 'behind-the-scenes',
      name: 'ÎπÑÌïòÏù∏Îìú Ïä§ÌÜ†Î¶¨',
      category: 'engagement',
      template: 'üëÄ [ÌöåÏÇ¨/ÌåÄ]Ïùò ÏùºÏÉÅ\n\nÏò§ÎäòÏùÄ [ÌôúÎèô/ÌîÑÎ°úÏ†ùÌä∏]Î•º ÏßÑÌñâÌñàÏäµÎãàÎã§!\n\n[ÏÉÅÏÑ∏ ÏÑ§Î™Ö]\n\n[Í∞êÏ†ï/ÎäêÎÇå]\n\n#ÎπÑÌïòÏù∏Îìú #ÏùºÏÉÅ #[Ìï¥ÏãúÌÉúÍ∑∏]',
      variables: ['ÌöåÏÇ¨/ÌåÄ', 'ÌôúÎèô/ÌîÑÎ°úÏ†ùÌä∏', 'ÏÉÅÏÑ∏ ÏÑ§Î™Ö', 'Í∞êÏ†ï/ÎäêÎÇå', 'Ìï¥ÏãúÌÉúÍ∑∏'],
      exampleOutput: 'üëÄ Í∞úÎ∞úÌåÄÏùò ÏùºÏÉÅ\n\nÏò§ÎäòÏùÄ ÏÉàÎ°úÏö¥ AI Í∏∞Îä•ÏùÑ ÌÖåÏä§Ìä∏ÌñàÏäµÎãàÎã§!\n\n3ÏãúÍ∞ÑÏùò ÎîîÎ≤ÑÍπÖ ÎÅùÏóê ÎìúÎîîÏñ¥ ÏÑ±Í≥µ üéâ\n\nÌåÄÏõêÎì§Í≥º Ìï®ÍªòÏó¨ÏÑú Îçî Ï¶êÍ±∞Ïõ†Ïñ¥Ïöî!\n\n#Í∞úÎ∞úÏùºÏÉÅ #ÌåÄÏõåÌÅ¨',
      bestTimeToPost: ['13:00', '17:00', '21:00']
    },
    {
      id: 'question-engagement',
      name: 'ÏßàÎ¨∏Ìòï Ï∞∏Ïó¨ Ïú†ÎèÑ',
      category: 'engagement',
      template: 'ü§î [ÏßàÎ¨∏]?\n\nA. [ÏÑ†ÌÉùÏßÄ1]\nB. [ÏÑ†ÌÉùÏßÄ2]\nC. [ÏÑ†ÌÉùÏßÄ3]\n\nÎåìÍ∏ÄÎ°ú ÏïåÎ†§Ï£ºÏÑ∏Ïöî! üëá\n\n[Ï∂îÍ∞Ä ÏÑ§Î™Ö/Ïù¥Ïú†]\n\n#Ìà¨Ìëú #ÏÜåÌÜµ',
      variables: ['ÏßàÎ¨∏', 'ÏÑ†ÌÉùÏßÄ1', 'ÏÑ†ÌÉùÏßÄ2', 'ÏÑ†ÌÉùÏßÄ3', 'Ï∂îÍ∞Ä ÏÑ§Î™Ö/Ïù¥Ïú†'],
      exampleOutput: 'ü§î Í∞ÄÏû• Ï§ëÏöîÌïú ÎßàÏºÄÌåÖ ÏßÄÌëúÎäî?\n\nA. Ï†ÑÌôòÏú®\nB. Í≥†Í∞ù ÌöçÎìù ÎπÑÏö©\nC. Í≥†Í∞ù ÏÉùÏï† Í∞ÄÏπò\n\nÎåìÍ∏ÄÎ°ú ÏïåÎ†§Ï£ºÏÑ∏Ïöî! üëá\n\nÏó¨Îü¨Î∂ÑÏùò ÏùòÍ≤¨Ïù¥ Í∂ÅÍ∏àÌï¥Ïöî!',
      bestTimeToPost: ['12:00', '16:00', '19:00']
    }
  ];

  /**
   * AI Í∏∞Î∞ò ÏΩòÌÖêÏ∏† ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ±
   */
  async generateContentIdeas(
    topic: string,
    count: number = 5,
    targetAudience?: string
  ): Promise<ContentIdea[]> {
    const ideas: ContentIdea[] = [];
    
    // Ìä∏Î†åÎî© ÌÜ†ÌîΩ Í∏∞Î∞ò ÏïÑÏù¥ÎîîÏñ¥
    const trendingTopics = [
      'AI ÌôúÏö©Î≤ï', 'ÏÉùÏÇ∞ÏÑ± Ìñ•ÏÉÅ', 'ÎßàÏºÄÌåÖ Ï†ÑÎûµ', 'Í≥†Í∞ù Í≤ΩÌóò', 'Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù',
      'ÏÜåÏÖú ÎØ∏ÎîîÏñ¥ ÌåÅ', 'Ïä§ÌÉÄÌä∏ÏóÖ ÏÑ±Ïû•', 'Î¶¨ÎçîÏã≠', 'Ìä∏Î†åÎìú Î∂ÑÏÑù', 'ÏºÄÏù¥Ïä§ Ïä§ÌÑ∞Îîî'
    ];

    // ÌõÖ ÌÖúÌîåÎ¶ø
    const hooks = [
      `${topic}Ïùò Ïà®Í≤®ÏßÑ ÎπÑÎ∞Ä`,
      `ÏïÑÎ¨¥ÎèÑ ÏïåÎ†§Ï£ºÏßÄ ÏïäÎäî ${topic} ÌåÅ`,
      `${topic}Î°ú ÏÑ±Í≥µÌïú Ïã§Ï†ú ÏÇ¨Î°Ä`,
      `${topic}Ïùò ÎØ∏ÎûòÎäî?`,
      `${topic} ÏôÑÎ≤Ω Í∞ÄÏù¥Îìú`,
      `Ï¥àÎ≥¥ÏûêÎ•º ÏúÑÌïú ${topic} ÏûÖÎ¨∏`,
      `Ï†ÑÎ¨∏Í∞ÄÍ∞Ä ÏïåÎ†§Ï£ºÎäî ${topic}`,
      `${topic} Ïã§Ìå® Í≤ΩÌóòÎã¥`,
      `${topic} ÏÑ±Í≥µÏùò 3Í∞ÄÏßÄ Î≤ïÏπô`,
      `${topic} Ìä∏Î†åÎìú 2025`
    ];

    // CTA ÌÖúÌîåÎ¶ø
    const ctas = [
      'Îçî ÎßéÏùÄ Ï†ïÎ≥¥Îäî ÌîÑÎ°úÌïÑ ÎßÅÌÅ¨ÏóêÏÑú!',
      'ÌåîÎ°úÏö∞ÌïòÍ≥† Îçî ÎßéÏùÄ ÌåÅ Î∞õÏïÑÎ≥¥ÏÑ∏Ïöî',
      'Ï†ÄÏû•ÌïòÍ≥† ÎÇòÏ§ëÏóê ÌôúÏö©ÌïòÏÑ∏Ïöî',
      'ÏπúÍµ¨ÏóêÍ≤å Í≥µÏú†Ìï¥Ï£ºÏÑ∏Ïöî',
      'ÎåìÍ∏ÄÎ°ú Ïó¨Îü¨Î∂ÑÏùò Í≤ΩÌóòÏùÑ Í≥µÏú†Ìï¥Ï£ºÏÑ∏Ïöî',
      'DMÏúºÎ°ú Î¨∏Ïùò Ï£ºÏÑ∏Ïöî',
      'Î¨¥Î£å ÏÉÅÎã¥ Ïã†Ï≤≠ÌïòÍ∏∞',
      'Îâ¥Ïä§Î†àÌÑ∞ Íµ¨ÎèÖÌïòÍ∏∞',
      'Îçî ÏûêÏÑ∏Ìïú ÎÇ¥Ïö©Ïù¥ Í∂ÅÍ∏àÌïòÏã†Í∞ÄÏöî?'
    ];

    for (let i = 0; i < count; i++) {
      const randomHook = hooks[Math.floor(Math.random() * hooks.length)];
      const randomCta = ctas[Math.floor(Math.random() * ctas.length)];
      
      ideas.push({
        topic: topic,
        hook: randomHook,
        body: this.generateBody(topic),
        cta: randomCta,
        hashtags: this.generateHashtags(topic),
        estimatedEngagement: Math.floor(Math.random() * 1000) + 100
      });
    }

    return ideas;
  }

  /**
   * ÏΩòÌÖêÏ∏† Î≥∏Î¨∏ ÏÉùÏÑ±
   */
  private generateBody(topic: string): string {
    const bodyTemplates = [
      `${topic}ÏùÑ(Î•º) ÏãúÏûëÌïòÍ∏∞ Ï†Ñ ÏïåÏïÑÏïº Ìï† 3Í∞ÄÏßÄ:\n\n1. Í∏∞Ï¥à Ïù¥Ìï¥ÌïòÍ∏∞\n2. Ïã§Ï†Ñ Ï†ÅÏö©ÌïòÍ∏∞\n3. Í≤∞Í≥º Ï∏°Ï†ïÌïòÍ∏∞`,
      `${topic} ÏÑ±Í≥µ ÏÇ¨Î°Ä:\n\n‚úÖ 3Í∞úÏõî ÎßåÏóê 200% ÏÑ±Ïû•\n‚úÖ ÎπÑÏö© 50% Ï†àÍ∞ê\n‚úÖ Ìö®Ïú®ÏÑ± 300% Ìñ•ÏÉÅ`,
      `${topic} Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏:\n\n‚ñ° Î™©Ìëú ÏÑ§Ï†ï\n‚ñ° Ï†ÑÎûµ ÏàòÎ¶Ω\n‚ñ° Ïã§Ìñâ Í≥ÑÌöç\n‚ñ° Î™®ÎãàÌÑ∞ÎßÅ\n‚ñ° ÏµúÏ†ÅÌôî`,
      `${topic}Ïùò ÌïµÏã¨:\n\nüí° Ïù∏ÏÇ¨Ïù¥Ìä∏: Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò Ï†ëÍ∑º\nüéØ Î™©Ìëú: Î™ÖÌôïÌïú KPI ÏÑ§Ï†ï\nüöÄ Ïã§Ìñâ: Îπ†Î•∏ ÌÖåÏä§Ìä∏ÏôÄ Í∞úÏÑ†`,
      `${topic} Ïã§Ìå® ÏõêÏù∏ TOP 3:\n\n‚ùå Ï§ÄÎπÑ Î∂ÄÏ°±\n‚ùå ÏûòÎ™ªÎêú ÌÉÄÏù¥Î∞ç\n‚ùå ÌîºÎìúÎ∞± Î¨¥Ïãú\n\nÏù¥Í≤ÉÎßå ÌîºÌï¥ÎèÑ ÏÑ±Í≥µÎ•† UP!`
    ];

    return bodyTemplates[Math.floor(Math.random() * bodyTemplates.length)];
  }

  /**
   * Ìï¥ÏãúÌÉúÍ∑∏ ÏÉùÏÑ±
   */
  generateHashtags(topic: string, count: number = 5): string[] {
    const baseHashtags = [
      '#Ïì∞Î†àÎìú', '#Threads', '#ÎßàÏºÄÌåÖ', '#ÎîîÏßÄÌÑ∏ÎßàÏºÄÌåÖ', '#ÏÜåÏÖúÎØ∏ÎîîÏñ¥',
      '#ÏΩòÌÖêÏ∏†ÎßàÏºÄÌåÖ', '#Î∏åÎûúÎî©', '#Ïä§ÌÉÄÌä∏ÏóÖ', '#ÎπÑÏ¶àÎãàÏä§', '#ÏÑ±Ïû•',
      '#ÌåÅ', '#Ïù∏ÏÇ¨Ïù¥Ìä∏', '#Ìä∏Î†åÎìú', '#Ï†ÑÎûµ', '#ÎßàÏºÄÌÑ∞', '#Ï∞ΩÏóÖ',
      '#AI', '#ÏûêÎèôÌôî', '#Îç∞Ïù¥ÌÑ∞Î∂ÑÏÑù', '#Í≥†Í∞ùÍ≤ΩÌóò'
    ];

    // ÌÜ†ÌîΩ Í¥ÄÎ†® Ìï¥ÏãúÌÉúÍ∑∏ Ï∂îÍ∞Ä
    const topicHashtags = [
      `#${topic.replace(/\s/g, '')}`,
      `#${topic.replace(/\s/g, '_')}`,
      `#${topic.split(' ')[0]}`
    ];

    const allHashtags = [...topicHashtags, ...baseHashtags];
    const selected = [];
    
    for (let i = 0; i < count && i < allHashtags.length; i++) {
      const randomIndex = Math.floor(Math.random() * allHashtags.length);
      if (!selected.includes(allHashtags[randomIndex])) {
        selected.push(allHashtags[randomIndex]);
      }
    }

    return selected;
  }

  /**
   * ÏΩòÌÖêÏ∏† ÌÖúÌîåÎ¶ø Ï†ÅÏö©
   */
  applyTemplate(
    templateId: string,
    variables: Record<string, string>
  ): ThreadsContent {
    const template = this.templates.find(t => t.id === templateId);
    if (!template) {
      throw new Error(`Template ${templateId} not found`);
    }

    let content = template.template;
    
    // Î≥ÄÏàò ÏπòÌôò
    for (const [key, value] of Object.entries(variables)) {
      content = content.replace(new RegExp(`\\[${key}\\]`, 'g'), value);
    }

    return {
      text: content,
      hashtags: this.generateHashtags(template.category),
      contentType: 'text',
      category: template.category,
      targetAudience: 'general'
    };
  }

  /**
   * ÏµúÏ†Å ÏóÖÎ°úÎìú ÏãúÍ∞Ñ Ï∂îÏ≤ú
   */
  getBestPostingTimes(
    targetAudience: string = 'general',
    timezone: string = 'Asia/Seoul'
  ): string[] {
    const audienceTimes: Record<string, string[]> = {
      'general': ['09:00', '12:00', '18:00', '20:00'],
      'business': ['08:00', '12:00', '17:00'],
      'young': ['14:00', '19:00', '21:00', '23:00'],
      'global': ['03:00', '10:00', '15:00', '22:00'] // KST Í∏∞Ï§Ä
    };

    return audienceTimes[targetAudience] || audienceTimes['general'];
  }

  /**
   * Ïù¥Î™®ÏßÄ Ï∂îÏ≤ú
   */
  suggestEmojis(category: string): string[] {
    const emojiMap: Record<string, string[]> = {
      'marketing': ['üìà', 'üéØ', 'üí°', 'üöÄ', 'üìä', 'üí∞', 'üî•', '‚≠ê'],
      'education': ['üìö', '‚úèÔ∏è', 'üéì', 'üí°', 'üß†', 'üìñ', '‚úÖ', 'üìù'],
      'social-proof': ['üåü', 'üí¨', 'üë•', 'üèÜ', '‚ú®', 'üíØ', 'üëç', 'üéâ'],
      'engagement': ['ü§î', 'üí≠', 'üëá', 'üí¨', '‚ùì', 'üó£Ô∏è', 'üôã', 'üì¢'],
      'product': ['üéÅ', 'üõçÔ∏è', '‚ú®', 'üÜï', 'üîî', 'üéä', 'üéà', 'üéÄ'],
      'tech': ['üíª', 'ü§ñ', '‚ö°', 'üîß', 'üõ†Ô∏è', 'üì±', 'üñ•Ô∏è', '‚å®Ô∏è']
    };

    return emojiMap[category] || emojiMap['marketing'];
  }

  /**
   * ÏΩòÌÖêÏ∏† ÏµúÏ†ÅÌôî Ï†úÏïà
   */
  optimizeContent(content: string): {
    optimized: string;
    suggestions: string[];
  } {
    const suggestions: string[] = [];
    let optimized = content;

    // Í∏∏Ïù¥ Ï≤¥ÌÅ¨ (500Ïûê Ï†úÌïú)
    if (content.length > 500) {
      suggestions.push('ÏΩòÌÖêÏ∏†Í∞Ä ÎÑàÎ¨¥ ÍπÅÎãàÎã§. 500Ïûê Ïù¥ÎÇ¥Î°ú Ï§ÑÏù¥ÏÑ∏Ïöî.');
      optimized = content.substring(0, 497) + '...';
    }

    // Ïù¥Î™®ÏßÄ Ï∂îÍ∞Ä Ï†úÏïà
    if (!content.match(/[\u{1F300}-\u{1F9FF}]/gu)) {
      suggestions.push('Ïù¥Î™®ÏßÄÎ•º Ï∂îÍ∞ÄÌïòÎ©¥ Ï∞∏Ïó¨Ïú®Ïù¥ ÎÜíÏïÑÏßëÎãàÎã§.');
    }

    // Ìï¥ÏãúÌÉúÍ∑∏ Ï≤¥ÌÅ¨
    const hashtagCount = (content.match(/#/g) || []).length;
    if (hashtagCount === 0) {
      suggestions.push('Ìï¥ÏãúÌÉúÍ∑∏Î•º Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî (3-5Í∞ú Í∂åÏû•)');
    } else if (hashtagCount > 10) {
      suggestions.push('Ìï¥ÏãúÌÉúÍ∑∏Í∞Ä ÎÑàÎ¨¥ ÎßéÏäµÎãàÎã§ (3-5Í∞ú Í∂åÏû•)');
    }

    // CTA Ï≤¥ÌÅ¨
    const ctaKeywords = ['ÌÅ¥Î¶≠', 'ÌôïÏù∏', 'Ïã†Ï≤≠', 'Íµ¨Îß§', 'Îã§Ïö¥Î°úÎìú', 'ÌåîÎ°úÏö∞', 'ÎåìÍ∏Ä'];
    const hasCTA = ctaKeywords.some(keyword => content.includes(keyword));
    if (!hasCTA) {
      suggestions.push('ÌñâÎèô Ïú†ÎèÑ Î¨∏Íµ¨(CTA)Î•º Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî');
    }

    // ÎùºÏù∏ Î∏åÎ†àÏù¥ÌÅ¨ Ï∂îÍ∞Ä
    if (!content.includes('\n')) {
      suggestions.push('Í∞ÄÎèÖÏÑ±ÏùÑ ÏúÑÌï¥ Ï§ÑÎ∞îÍøàÏùÑ Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî');
    }

    return { optimized, suggestions };
  }

  /**
   * ÌÖúÌîåÎ¶ø Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
   */
  getTemplates(): ContentTemplate[] {
    return this.templates;
  }

  /**
   * ÏÉà ÌÖúÌîåÎ¶ø Ï∂îÍ∞Ä
   */
  addTemplate(template: ContentTemplate): void {
    this.templates.push(template);
  }
}

// ÏÇ¨Ïö© ÏòàÏãúÎ•º ÏúÑÌïú CLI Î™ÖÎ†πÏñ¥ Îß§Ìïë
export const contentCommands = {
  'generate_ideas': async (topic: string, count: number = 5) => {
    const creator = new ThreadsContentCreator();
    return await creator.generateContentIdeas(topic, count);
  },
  
  'apply_template': (templateId: string, variables: Record<string, string>) => {
    const creator = new ThreadsContentCreator();
    return creator.applyTemplate(templateId, variables);
  },
  
  'optimize': (content: string) => {
    const creator = new ThreadsContentCreator();
    return creator.optimizeContent(content);
  },
  
  'best_times': (audience: string = 'general') => {
    const creator = new ThreadsContentCreator();
    return creator.getBestPostingTimes(audience);
  },
  
  'suggest_hashtags': (topic: string) => {
    const creator = new ThreadsContentCreator();
    return creator.generateHashtags(topic);
  }
};
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
</file>

<file path=".cursorignore">
pnpm-lock.yaml
yarn.lock
package-lock.json
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# EasyNext
.easynext

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}
</file>

<file path="eslint.config.mjs">
import { dirname } from 'path';
import { fileURLToPath } from 'url';
import { FlatCompat } from '@eslint/eslintrc';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends('next/core-web-vitals', 'next/typescript'),
  {
    rules: {
      '@typescript-eslint/no-empty-object-type': 'off',
      '@typescript-eslint/no-explicit-any': 'off',
      '@typescript-eslint/no-unused-vars': 'off',
    },
  },
];

export default eslintConfig;
</file>

<file path="next.config.ts">
import type { NextConfig } from 'next';

const nextConfig: NextConfig = {
  /* config options here */
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: {
    remotePatterns: [
      {
        hostname: '**',
      },
    ],
  },
};

export default nextConfig;
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

export default config;
</file>

<file path="sample-threads-posts.md">
# ÏÉòÌîå Threads Ìè¨Ïä§Ìä∏ 3Í∞ú

ÎßàÏºÄÌåÖ ÎåÄÏãúÎ≥¥Îìú ÏΩòÌÖêÏ∏† ÌÅ¨Î¶¨ÏóêÏù¥ÌÑ∞ ÏãúÏä§ÌÖúÏùÑ ÏÇ¨Ïö©Ìï¥ ÏÉùÏÑ±Ìïú Ïã§Ï†Ñ ÌôúÏö© Í∞ÄÎä•Ìïú Threads Ìè¨Ïä§Ìä∏ÏûÖÎãàÎã§.

## üìä Ìè¨Ïä§Ìä∏ 1: AI ÎèÑÍµ¨Î•º ÌôúÏö©Ìïú ÎßàÏºÄÌåÖ ÏûêÎèôÌôî

**ÌÖúÌîåÎ¶ø**: ÌåÅ & Ìä∏Î¶≠ (tips-and-tricks)
**Ïπ¥ÌÖåÍ≥†Î¶¨**: education
**ÌÉÄÍ≤ü**: ÎßàÏºÄÌÑ∞, ÎπÑÏ¶àÎãàÏä§ Ïò§ÎÑà

```
üí° AI ÎßàÏºÄÌåÖ ÏûêÎèôÌôî ÍøÄÌåÅ 3Í∞ÄÏßÄ üöÄ

1Ô∏è‚É£ Í≥†Í∞ù ÏÑ∏Í∑∏Î®ºÌä∏ ÏûêÎèô Î∂ÑÎ•ò
Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞òÏúºÎ°ú Í≥†Í∞ùÏùÑ ÏûêÎèô Í∑∏Î£πÌïëÌïòÏó¨ Í∞úÏù∏ÌôîÎêú Î©îÏãúÏßÄ Î∞úÏÜ°

2Ô∏è‚É£ Ïã§ÏãúÍ∞Ñ ÏÑ±Í≥º Î™®ÎãàÌÑ∞ÎßÅ
AIÍ∞Ä 24/7 Ï∫†ÌéòÏù∏ÏùÑ Î∂ÑÏÑùÌïòÍ≥† ÏµúÏ†ÅÌôî Ï†úÏïà ÏïåÎ¶º

3Ô∏è‚É£ ÏΩòÌÖêÏ∏† ÏûêÎèô ÏÉùÏÑ±
Î∏åÎûúÎìú ÌÜ§Ïï§Îß§ÎÑà ÌïôÏäµÌïú AIÎ°ú ÏÜåÏÖúÎØ∏ÎîîÏñ¥ ÏΩòÌÖêÏ∏† ÏûêÎèô ÏÉùÏÑ±

Î∂ÅÎßàÌÅ¨ÌïòÍ≥† ÎÇòÏ§ëÏóê ÌôúÏö©ÌïòÏÑ∏Ïöî! üìå

Îçî ÎßéÏùÄ ÌåÅÏùÄ ÌîÑÎ°úÌïÑ ÎßÅÌÅ¨ÏóêÏÑú üëÜ

#AIÎßàÏºÄÌåÖ #ÎßàÏºÄÌåÖÏûêÎèôÌôî #ÎîîÏßÄÌÑ∏ÎßàÏºÄÌåÖ #ÎßàÏºÄÌÑ∞ #ÎπÑÏ¶àÎãàÏä§ÌåÅ
```

**ÏµúÏ†Å Ìè¨Ïä§ÌåÖ ÏãúÍ∞Ñ**: 10:00, 14:00, 20:00
**ÏòàÏÉÅ Ï∞∏Ïó¨ÎèÑ**: ‚≠ê‚≠ê‚≠ê‚≠ê (ÎÜíÏùå)
**Í∏ÄÏûê Ïàò**: 248Ïûê

---

## üöÄ Ìè¨Ïä§Ìä∏ 2: Ïä§ÌÉÄÌä∏ÏóÖ ÏÑ±Ïû• Ï†ÑÎûµ

**ÌÖúÌîåÎ¶ø**: ÎπÑÌïòÏù∏Îìú Ïä§ÌÜ†Î¶¨ + ÏºÄÏù¥Ïä§ Ïä§ÌÑ∞Îîî ÌòºÌï©
**Ïπ¥ÌÖåÍ≥†Î¶¨**: business
**ÌÉÄÍ≤ü**: Ï∞ΩÏóÖÏûê, Ïä§ÌÉÄÌä∏ÏóÖ ÌåÄ

```
üéØ 3Í∞úÏõî ÎßåÏóê MAU 500% ÏÑ±Ïû•Ìïú ÎπÑÍ≤∞

Ïö∞Î¶¨ Ïä§ÌÉÄÌä∏ÏóÖÏù¥ Ïã§Ï†úÎ°ú Ï†ÅÏö©Ìïú ÏÑ±Ïû• Ìï¥ÌÇπ Ï†ÑÎûµ Í≥µÍ∞ú! üí™

‚ú® ÌïµÏã¨ Ï†ÑÎûµ 3Í∞ÄÏßÄ:
‚Ä¢ Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò ÏÇ¨Ïö©Ïûê Ïó¨Ï†ï ÏµúÏ†ÅÌôî
‚Ä¢ Î∞îÏù¥Îü¥ Ï∂îÏ≤ú ÏãúÏä§ÌÖú Íµ¨Ï∂ï  
‚Ä¢ Í≥†Í∞ù ÌîºÎìúÎ∞± Ïã§ÏãúÍ∞Ñ Î∞òÏòÅ

üìà Í≤∞Í≥º:
- Ïõî ÌôúÏÑ± ÏÇ¨Ïö©Ïûê 2,000 ‚Üí 10,000Î™Ö
- Í≥†Í∞ù ÎßåÏ°±ÎèÑ 95% Îã¨ÏÑ±
- Ïû¨Î∞©Î¨∏Ïú® 3Î∞∞ Ï¶ùÍ∞Ä

Ïã§Ìå®ÎèÑ ÎßéÏïòÏßÄÎßå Ìè¨Í∏∞ÌïòÏßÄ ÏïäÏïòÍ∏∞Ïóê Í∞ÄÎä•ÌñàÏñ¥Ïöî! üî•

Ï∞ΩÏóÖÏûêÎ∂ÑÎì§, Ïñ¥Îñ§ Ï†ÑÎûµÏù¥ Í∞ÄÏû• ÎèÑÏõÄ ÎêòÏÖ®ÎÇòÏöî? 
ÎåìÍ∏ÄÎ°ú Í≥µÏú†Ìï¥Ï£ºÏÑ∏Ïöî! üëá

#Ïä§ÌÉÄÌä∏ÏóÖÏÑ±Ïû• #Ï∞ΩÏóÖ #ÏÑ±Ïû•Ìï¥ÌÇπ #MAU #Îç∞Ïù¥ÌÑ∞ÎßàÏºÄÌåÖ
```

**ÏµúÏ†Å Ìè¨Ïä§ÌåÖ ÏãúÍ∞Ñ**: 09:00, 12:00, 18:00
**ÏòàÏÉÅ Ï∞∏Ïó¨ÎèÑ**: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (Îß§Ïö∞ ÎÜíÏùå)
**Í∏ÄÏûê Ïàò**: 312Ïûê

---

## üíª Ìè¨Ïä§Ìä∏ 3: Í∞úÎ∞úÏûêÎ•º ÏúÑÌïú ÏÉùÏÇ∞ÏÑ± ÌåÅ

**ÌÖúÌîåÎ¶ø**: Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ + ÌåÅ Ï°∞Ìï©
**Ïπ¥ÌÖåÍ≥†Î¶¨**: tech
**ÌÉÄÍ≤ü**: Í∞úÎ∞úÏûê, ÌîÑÎ°úÍ∑∏ÎûòÎ®∏

```
‚ö° Í∞úÎ∞ú ÏÉùÏÇ∞ÏÑ± 10Î∞∞ ÎÜíÏù¥Îäî Î£®Ìã¥ Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏

Í∞úÎ∞úÏûê 5ÎÖÑ Í≤ΩÌóòÏúºÎ°ú Ï†ïÎ¶¨Ìïú Ïã§Ï†Ñ ÌåÅ! üõ†Ô∏è

üåÖ **Ïò§Ï†Ñ Î£®Ìã¥**
‚ñ° Ïù¥Ïäà Ïö∞ÏÑ†ÏàúÏúÑ Ï†ïÎ¶¨ (5Î∂Ñ)
‚ñ° ÌÅ∞ ÏûëÏóÖ Î®ºÏ†Ä, ÏûëÏùÄ ÏûëÏóÖ ÎÇòÏ§ëÏóê
‚ñ° Ìè¨Î™®ÎèÑÎ°ú ÌÉÄÏù¥Î®∏ ÏÑ∏ÌåÖ (25Î∂Ñ ÏßëÏ§ë)

üîß **Í∞úÎ∞ú Ï§ë**  
‚ñ° Ïª§Î∞ã Î©îÏãúÏßÄÎäî Î™ÖÌôïÌïòÍ≤å
‚ñ° ÏΩîÎìú Î¶¨Î∑∞ ÏöîÏ≤≠ÏùÄ Ï¶âÏãú
‚ñ° ÎßâÌûàÎ©¥ 15Î∂Ñ Î£∞ Ï†ÅÏö© (15Î∂Ñ Í≥†ÎØº ÌõÑ ÏßàÎ¨∏)

üöÄ **Ìö®Ïú® ÎèÑÍµ¨Îì§**
‚Ä¢ GitHub CopilotÏúºÎ°ú ÏΩîÎìú ÏûêÎèôÏôÑÏÑ±
‚Ä¢ NotionÏúºÎ°ú Î¨∏ÏÑúÌôî 
‚Ä¢ Slack Î∞©Ìï¥ Í∏àÏßÄ Î™®Îìú ÌôúÏö©

Ïù¥ Ï§ëÏóê Î™®Î•¥Îäî ÌåÅÏù¥ ÏûàÎã§Î©¥ Ï†ÄÏû• ÌïÑÏàò! üìå

Ïñ¥Îñ§ ÌåÅÏù¥ Í∞ÄÏû• ÎèÑÏõÄ Îê† Í≤É Í∞ôÎÇòÏöî? ü§î

#Í∞úÎ∞úÏûê #ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç #ÏÉùÏÇ∞ÏÑ± #ÏΩîÎî©ÌåÅ #Í∞úÎ∞úÎèÑÍµ¨ #Ìè¨Î™®ÎèÑÎ°ú
```

**ÏµúÏ†Å Ìè¨Ïä§ÌåÖ ÏãúÍ∞Ñ**: 13:00, 17:00, 21:00  
**ÏòàÏÉÅ Ï∞∏Ïó¨ÎèÑ**: ‚≠ê‚≠ê‚≠ê‚≠ê (ÎÜíÏùå)
**Í∏ÄÏûê Ïàò**: 398Ïûê

---

## üìã ÏΩòÌÖêÏ∏† ÏµúÏ†ÅÌôî Î∂ÑÏÑù

### Í≥µÌÜµ ÏµúÏ†ÅÌôî ÏöîÏÜå:
- ‚úÖ Ïù¥Î™®ÏßÄ Ï†ÅÏ†àÌûà ÌôúÏö© (ÏãúÍ∞ÅÏ†Å Ïñ¥ÌïÑ)
- ‚úÖ 500Ïûê Ïù¥ÎÇ¥ Ï§ÄÏàò (Í∞ÄÎèÖÏÑ±)
- ‚úÖ Ìï¥ÏãúÌÉúÍ∑∏ 5-6Í∞ú (ÎÖ∏Ï∂ú ÏµúÏ†ÅÌôî)
- ‚úÖ Î™ÖÌôïÌïú CTA Ìè¨Ìï® (Ï∞∏Ïó¨ Ïú†ÎèÑ)
- ‚úÖ Ï§ÑÎ∞îÍøàÏúºÎ°ú Í∞ÄÎèÖÏÑ± Ìñ•ÏÉÅ
- ‚úÖ Íµ¨Ï≤¥Ï†ÅÏù∏ ÏàòÏπò Ï†úÏãú (Ïã†Î¢∞ÎèÑ)

### Ìè¨Ïä§ÌåÖ Ï†ÑÎûµ:
1. **ÌÉÄÏù¥Î∞ç**: Í∞Å Ìè¨Ïä§Ìä∏Î≥Ñ ÏµúÏ†Å ÏãúÍ∞ÑÏóê Í≤åÏãú
2. **ÏÉÅÌò∏ÏûëÏö©**: ÎåìÍ∏ÄÏóê Ï†ÅÍ∑π ÏùëÎãµÌïòÏó¨ ÏïåÍ≥†Î¶¨Ï¶ò Î∂ÄÏä§Ìä∏
3. **ÌÅ¨Î°úÏä§ ÌîåÎû´Ìèº**: Îã§Î•∏ SNSÏóêÎèÑ Î≥ÄÌòïÌïòÏó¨ ÌôúÏö©
4. **Ï∂îÏ†Å**: Ïù∏ÏÇ¨Ïù¥Ìä∏Î°ú ÏÑ±Í≥º Î∂ÑÏÑù ÌõÑ Í∞úÏÑ†

### ÏãúÎ¶¨Ï¶àÌôî Ï†úÏïà:
- AI ÎßàÏºÄÌåÖ: Ï£ºÍ∞Ñ ÌåÅ ÏãúÎ¶¨Ï¶à
- Ïä§ÌÉÄÌä∏ÏóÖ: ÏõîÍ∞Ñ ÏÑ±Ïû• ÏÇ¨Î°Ä
- Í∞úÎ∞ú ÏÉùÏÇ∞ÏÑ±: Ï£ºÍ∞Ñ ÎèÑÍµ¨ Î¶¨Î∑∞

---

**ÏÉùÏÑ± ÏùºÏãú**: 2025-08-22
**ÏÉùÏÑ± ÎèÑÍµ¨**: ÎßàÏºÄÌåÖ ÎåÄÏãúÎ≥¥Îìú ÏΩòÌÖêÏ∏† ÌÅ¨Î¶¨ÏóêÏù¥ÌÑ∞ ÏãúÏä§ÌÖú
**ÌôúÏö©ÎèÑ**: Ï¶âÏãú ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏôÑÏÑ±Îêú Ìè¨Ïä§Ìä∏
</file>

<file path="tailwind.config.ts">
import type { Config } from 'tailwindcss';

const config = {
  darkMode: ['class'],
  content: ['./src/**/*.{ts,tsx}'],
  prefix: '',
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px',
      },
    },
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: { height: '0' },
          to: { height: 'var(--radix-accordion-content-height)' },
        },
        'accordion-up': {
          from: { height: 'var(--radix-accordion-content-height)' },
          to: { height: '0' },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [require('tailwindcss-animate'), require('@tailwindcss/typography')],
} satisfies Config;

export default config;
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "strictNullChecks": false,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noImplicitAny": false,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="package.json">
{
  "name": "my-marketing-dashboard",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^4",
    "@octokit/rest": "^22.0.0",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-avatar": "^1.1.2",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-dialog": "^1.1.4",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-select": "^2.1.4",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.6",
    "@tanstack/react-query": "^5",
    "autoprefixer": "10.4.20",
    "axios": "^1.11.0",
    "chart.js": "^4.5.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "date-fns": "^4",
    "dotenv": "^17.2.1",
    "es-toolkit": "^1",
    "framer-motion": "^11",
    "html2canvas": "^1.4.1",
    "jspdf": "^3.0.1",
    "lucide-react": "^0.469.0",
    "next": "15.1.0",
    "next-themes": "^0.4.3",
    "nodemailer": "^7.0.5",
    "react": "^19.0.0",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7",
    "react-use": "^17",
    "server-only": "0.0.1",
    "ts-pattern": "^5",
    "zod": "^3",
    "zustand": "^4"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/typography": "^0.5.10",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.0",
    "postcss": "^8",
    "tailwind-merge": "^2.5.2",
    "tailwindcss": "^3.4.1",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "^5"
  }
}
</file>

<file path="README.md">
# üìä Marketing Dashboard

Marketing Analytics Dashboard for Threads, Instagram, and TikTok - Built with Next.js and EasyNext

## üöÄ Overview

A comprehensive marketing analytics platform designed to track, analyze, and optimize social media performance across multiple platforms. Special focus on **Threads** analytics with AI-powered insights and automated reporting.

## ‚ú® Key Features

### üìà Analytics & Metrics
- **Real-time Performance Tracking** - Monitor follower growth, engagement rates, and content performance
- **Multi-platform Support** - Threads, Instagram, TikTok in one dashboard
- **Competitor Analysis** - Benchmark against competitors
- **AI-Powered Insights** - Get strategic recommendations

### üìä Data Visualization
- Interactive charts with Chart.js
- Customizable dashboards
- Export reports as PDF/Excel
- Real-time data updates

### ü§ñ Automation
- Scheduled reports via email
- GitHub integration for report archiving
- MCP storage system integration
- Webhook notifications

## üõ†Ô∏è Tech Stack

- **Framework**: [Next.js 15](https://nextjs.org/) + [EasyNext](https://github.com/easynextjs/easynext)
- **Language**: TypeScript
- **Styling**: Tailwind CSS
- **UI Components**: shadcn/ui
- **Charts**: Chart.js + react-chartjs-2
- **State Management**: Zustand
- **API Client**: Axios
- **Form Handling**: React Hook Form + Zod
- **Database**: Supabase (optional)

## üì¶ Installation

### Prerequisites
- Node.js 20+
- npm or yarn
- Git

### Quick Start

```bash
# Clone the repository
git clone https://github.com/MadKangYu/my-marketing-dashboard.git
cd my-marketing-dashboard

# Install dependencies
npm install

# Set up environment variables
cp .env.example .env.local
# Edit .env.local with your API keys

# Run development server
npm run dev

# Open http://localhost:3000
```

## üîß Configuration

### Environment Variables

Create a `.env.local` file:

```env
# API Keys
THREADS_API_KEY=your_threads_api_key
INSTAGRAM_API_KEY=your_instagram_api_key
TIKTOK_API_KEY=your_tiktok_api_key

# Email Configuration (for reports)
EMAIL_USER=your_email@gmail.com
EMAIL_PASS=your_app_password

# GitHub Integration
GITHUB_TOKEN=your_github_token
GITHUB_REPO=username/repo-name

# Optional: AI Services
OPENAI_API_KEY=your_openai_key
```

## üì± CLI Commands

The dashboard includes a powerful CLI for data analysis:

### Growth Analysis
```bash
analyze_growth --account k.madlab --platform threads --period 30d
```

### Top Posts
```bash
get_top_posts --account k.madlab --platform threads --metric engagement --limit 5
```

### Competitor Comparison
```bash
compare_accounts --target k.madlab --competitor clickmate_seller --platform threads
```

### Export Reports
```bash
export_report --account k.madlab --platform threads --type weekly --format pdf --share email@example.com
```

### AI Strategy
```bash
ai_strategy --account k.madlab --platform threads --goal "increase followers 10%" --period 30d
```

## üìä Dashboard Features

### 1. Real-time Metrics
- Follower count and growth rate
- Engagement metrics (likes, comments, shares)
- Reach and impressions
- Best performing content

### 2. Trend Analysis
- Content performance over time
- Optimal posting times
- Hashtag effectiveness
- Audience demographics

### 3. Report Generation
- Weekly/Monthly automated reports
- Custom date range analysis
- Multiple export formats (PDF, Excel, JSON)
- Email and cloud storage integration

### 4. AI Insights
- Content recommendations
- Posting schedule optimization
- Hashtag suggestions
- Growth strategy planning

## üîå API Endpoints

### Report Generation
```http
POST /api/report
Content-Type: application/json

{
  "command": "export_report --account k.madlab --platform threads --type weekly"
}
```

### Analytics Data
```http
GET /api/analytics?account=k.madlab&platform=threads&period=7d
```

### Competitor Analysis
```http
GET /api/compare?target=k.madlab&competitor=competitor_account
```

## üìÇ Project Structure

```
my-marketing-dashboard/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ app/                 # Next.js App Router
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api/             # API routes
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dashboard/       # Dashboard pages
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ page.tsx         # Home page
‚îÇ   ‚îú‚îÄ‚îÄ components/          # React components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ charts/          # Chart components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ threads/         # Threads-specific
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui/              # shadcn/ui components
‚îÇ   ‚îú‚îÄ‚îÄ lib/                 # Utilities
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ threads-api/     # API wrappers
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ report/          # Report generation
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ analytics/       # Data processing
‚îÇ   ‚îî‚îÄ‚îÄ hooks/               # Custom React hooks
‚îú‚îÄ‚îÄ public/                  # Static assets
‚îú‚îÄ‚îÄ .claude/                 # Claude Code settings
‚îî‚îÄ‚îÄ package.json            # Dependencies
```

## üöÄ Deployment

### Vercel (Recommended)
```bash
# Install Vercel CLI
npm i -g vercel

# Deploy
vercel

# Deploy to production
vercel --prod
```

### Docker
```bash
# Build image
docker build -t marketing-dashboard .

# Run container
docker run -p 3000:3000 marketing-dashboard
```

## ü§ù Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üôè Acknowledgments

- Built with [EasyNext](https://github.com/easynextjs/easynext)
- UI components from [shadcn/ui](https://ui.shadcn.com)
- Charts powered by [Chart.js](https://www.chartjs.org)
- Deployed on [Vercel](https://vercel.com)

## üìû Support

For support, email richardowen7212@gmail.com or open an issue on GitHub.

## üîó Links

- [Live Demo](https://marketing-dashboard.vercel.app)
- [Documentation](https://docs.marketing-dashboard.com)
- [GitHub Repository](https://github.com/MadKangYu/my-marketing-dashboard)

---

Made with ‚ù§Ô∏è by MadKangYu | Powered by Claude Code & EasyNext
</file>

</files>
